* Todo list
  The big outstanding items. Most of it is tooling.
** Better handling of dynamic environments
   Currently we manage the dynamic environment (arguments passed to Î¼s) using
   metadata on the AST. This requires walking the AST when we load code referred
   to by a symbol. Unsurprisingly this is slow. But it's not *that* slow. I can
   live with it for the moment.

   The plan is to switch to a compiler once the language is more fleshed out
   anyway.
** Bootstrapped repl
   Julia's repl is pretty slick in the terminal, but the emacs integration is
   primitive, slow, and not very fun to use (term-mode sucks up all key presses
   which makes it basically impossible to bind new shortcuts).

   So we need something else. nrepl/cidre is the standard by which I judge
   interactivity.

   So why not just use nrepl? Well I still need to run julia code a lot, so I'm
   not sure if that will work, but it's worth looking into.
** statefuls
   Along with the whole transduction setup
** bit blobs
   for interop and bootstrapping
** executors
   schedulers and work stealing
** Namespaces
** Layered architecture
   Take the basic idea direct from vulkan. Rewrite the interpreter so that all
   functions can be indirected and move all non-critical logic out of the main
   implementation.
